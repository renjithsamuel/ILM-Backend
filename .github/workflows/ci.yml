name: order-management-service
on: [push]
permissions:
  contents: read
jobs:
  golang-ci:
    name: lint
    runs-on: self-hosted
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.18'
      - name: Granting private modules access
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          CI_SERVER_HOST: github.com
          GONOPROXY: github.com/affordmed
          GOPRIVATE: github.com/affordmed
        run: git config --global url."https://root:${GITHUB_ACCESS_TOKEN}@github.com/".insteadOf "https://github.com"
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
  semgrep:
    name: semgrep
    runs-on: self-hosted
    container:
      image: returntocorp/semgrep
    steps:
      - uses: actions/checkout@v3
      - run: semgrep --config=auto .
  unit-test:
    name: unit-test
    runs-on: self-hosted
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: omstest
          POSTGRES_PASSWORD: testadmin
          POSTGRES_DB: order-management-service
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.18'
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Granting private modules access
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          CI_SERVER_HOST: github.com
          GONOPROXY: github.com/affordmed
          GOPRIVATE: github.com/affordmed
        run: git config --global url."https://root:${GITHUB_ACCESS_TOKEN}@github.com/".insteadOf "https://github.com"
      - name: Run test
        env:
          TEST_COVERAGE: ${{ vars.TEST_COVERAGE }}
        run: |
          sudo apt update && sudo apt-get install bc
          go test -cover  ./... -coverprofile=/tmp/coverage.out -v
          test_coverage=$(go tool cover -func=/tmp/coverage.out | tail -1 |awk '{print $3}'| tr -d '%') # gives pure coverage value
          echo "Code coverage is ${test_coverage}"
          if [[ 1 -eq $(echo ${TEST_COVERAGE}'<'$test_coverage  | bc -l) ]];
          then echo "Pass tests and coverage is over ${TEST_COVERAGE}%";
          else echo "Pass tests but coverage is under ${TEST_COVERAGE}%"; exit 1;
          fi
          echo "Download coverage.out and execute `go tool cover -html=coverage.out`"
  go-build:
    runs-on: self-hosted
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: build
        env:
          CI_COMMIT_SHA: ${{ github.sha }}
          CI_COMMIT_TAG: ${{ github.ref }}
          EXEC_NAME: order-management-service
          GITHUB_USERNAME: ${{ secrets.SCM_USERNAME }}
          GITHUB_ACCESS_TOKEN: ${{ secrets.SCM_TOKEN }}
        run: make build
      - name: Step 3 - Use the Upload Artifact GitHub Action
        uses: actions/upload-artifact@v3
        with:
          name: executable
          path: bin